#include "mythread.h"


MyThread::MyThread(const QString &threadName, QObject *parent) :
    QThread(parent)
{
    setObjectName(threadName);
}


static void MyThread::initialize(){
    
}


//A redefinir: la signature, savoir si le retour doit permettre
//de passer des res des calcules pour le render ou si on peut y acceder
//sans en avoir besoin
/**
 * @brief 
 * @param min est la borne inferieur de l'axe x, resp y, dans laquelle
 * doit etre effectue le calcul, max est la borne superieure de l'axe
 * x, resp y, dans laquelle doit etre effectue le calcul
 */
void MyThread::run(int minX, int maxX, int minY, int maxY){
    for (int y = minY; y < maxY; ++y) {
        
        //Attention, s'assurer de la bonne terminaison des threads ici
        if (restart)
            break;
        if (abort)
            return;

        QRgb *scanLine =
                reinterpret_cast<QRgb *>(image.scanLine(y + halfHeight));
        double ay = centerY + (y * scaleFactor);

        for (int x = minX; x < maxX; ++x) {
            double ax = centerX + (x * scaleFactor);
            double a1 = ax;
            double b1 = ay;
            int numIterations = 0;

            do {
                ++numIterations;
                double a2 = (a1 * a1) - (b1 * b1) + ax;
                double b2 = (2 * a1 * b1) + ay;
                if ((a2 * a2) + (b2 * b2) > Limit)
                    break;

                ++numIterations;
                a1 = (a2 * a2) - (b2 * b2) + ax;
                b1 = (2 * a2 * b2) + ay;
                if ((a1 * a1) + (b1 * b1) > Limit)
                    break;
            } while (numIterations < MaxIterations);

            if (numIterations < MaxIterations) {
                *scanLine++ = colormap[numIterations % ColormapSize];
            } else {
                *scanLine++ = qRgb(0, 0, 0);
            }
        }
    }
}